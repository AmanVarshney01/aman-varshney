---
import FormattedDate from '../../components/FormattedDate.astro'
import Layout from '../../layouts/Layout.astro'
import { type CollectionEntry, getCollection, render } from 'astro:content'

export const getStaticPaths = async () => {
	const allBlogs = await getCollection('blog')
	return allBlogs.map((post) => ({
		params: { slug: post.id },
		props: post
	}))
}

type Props = CollectionEntry<'blog'>

const post = Astro.props
const { Content, headings } = await render(post)
---

<Layout title={post.data.title}>
	<div class="flex flex-col">
		<h1 transition:name="post-heading" class="mb-0 pb-2">
			{post.data.title}
		</h1>
		<div class="flex flex-row items-center gap-2 pb-4">
			<FormattedDate date={post.data.pubDate} />
			{
				post.data.updatedDate && (
					<div class="last-updated-on">
						Last updated on <FormattedDate date={post.data.updatedDate} />
					</div>
				)
			}
		</div>
		<a class="link" href=`https://amanvarshney.hashnode.dev/${post.id}` target="_blank"
			>Read on Hashnode</a
		>
	</div>
	<article id="post-content">
		<Content />
	</article>
	<div class="not-prose fixed left-5 top-40 hidden flex-row gap-4 lg:flex">
		<ul class="hidden space-y-1 text-base-content/60" id="table-of-contents">
			{
				headings.map((heading) => (
					<li style={`margin-left: ${(heading.depth - 2) * 20}px;`}>
						<a href={`#${heading.slug}`} class="text-sm hover:underline">
							{heading.text}
						</a>
					</li>
				))
			}
		</ul>
	</div>
	<div class="pt-8">
		<script
			is:inline
			src="https://giscus.app/client.js"
			data-repo="AmanVarshney01/aman-varshney"
			data-repo-id="R_kgDOK2jPEQ"
			data-category="General"
			data-category-id="DIC_kwDOK2jPEc4CgTww"
			data-mapping="pathname"
			data-strict="0"
			data-reactions-enabled="1"
			data-emit-metadata="0"
			data-input-position="top"
			data-theme="preferred_color_scheme"
			data-lang="en"
			data-loading="lazy"
			crossorigin="anonymous"
			async></script>
	</div>
</Layout>

<script is:inline>
	function highlightCurrentHeading() {
		const headings = document.querySelectorAll('h2, h3, h4, h5, h6')
		const tocLinks = document.querySelectorAll('#table-of-contents a')

		let currentHeadingIndex = 0

		headings.forEach((heading, index) => {
			const rect = heading.getBoundingClientRect()
			if (rect.top <= 100) {
				currentHeadingIndex = index
			}
		})

		tocLinks.forEach((link, index) => {
			if (index === currentHeadingIndex) {
				link.classList.add('text-base-content', 'font-bold')
			} else {
				link.classList.remove('text-base-content', 'font-bold')
			}
		})
	}

	function showTableOfContents() {
		const firstHeading = document.querySelector('h2, h3, h4, h5, h6')
		if (!firstHeading) return

		const rect = firstHeading.getBoundingClientRect()
		const toc = document.getElementById('table-of-contents')
		if (!toc) return

		if (rect.top <= 0) {
			toc.classList.remove('hidden')
		} else {
			toc.classList.add('hidden')
		}
	}

	function updateAll() {
		highlightCurrentHeading()
		showTableOfContents()
	}

	document.addEventListener('astro:page-load', () => {
		updateAll()
		window.addEventListener('scroll', updateAll)
		window.addEventListener('resize', updateAll)
	})

	document.addEventListener('astro:before-swap', () => {
		window.removeEventListener('scroll', updateAll)
		window.removeEventListener('resize', updateAll)
	})
</script>
