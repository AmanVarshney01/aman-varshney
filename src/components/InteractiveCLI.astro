<div class="cli-container my-8">
	<div class="cli-header">
		<div class="cli-dots">
			<span></span>
			<span></span>
			<span></span>
		</div>
		<div class="cli-title">interactive terminal</div>
	</div>
	<div class="cli-body" id="interactive-cli">
		<div class="welcome-text">
			<p>Welcome to Aman Varshney's interactive terminal.</p>
			<p>Type <span class="cmd-hint">help</span> for available commands.</p>
			<p class="keyboard-hint">
				Keyboard shortcuts: <span class="cmd-hint">↑/↓</span> command history, <span
					class="cmd-hint">Tab</span
				> autocomplete, <span class="cmd-hint">Ctrl+L</span> clear screen
			</p>
		</div>
		<div id="command-history"></div>
		<div class="input-line">
			<span class="prompt">$</span>
			<input type="text" id="cli-input" spellcheck="false" autocomplete="off" autofocus />
		</div>
	</div>
</div>

<script lang="js">
	let commandHistory = []
	let historyIndex = -1
	let tempInputBeforeHistory = ''

	const commands = {
		help: {
			description: 'Show available commands',
			action: () => {
				return Object.keys(commands)
					.map((cmd) => {
						return `${cmd.padEnd(12)} - ${commands[cmd].description}`
					})
					.join('\n')
			}
		},
		clear: {
			description: 'Clear the terminal',
			action: () => {
				document.getElementById('command-history').innerHTML = ''
				return ''
			}
		},
		about: {
			description: 'Show information about me',
			action: () => {
				return `
Hi, I'm Aman Varshney.
- B.Tech CSE student
- Web & app developer
- Ex-intern @ KofferX
- Passionate about building user-friendly web applications`
			}
		},
		projects: {
			description: 'List my projects',
			action: () => {
				return `
My Projects:
1. [project1](/projects/project1) - Project 1 description
2. [project2](/projects/project2) - Project 2 description
3. [project3](/projects/project3) - Project 3 description`
			}
		},
		skills: {
			description: 'List my technical skills',
			action: () => {
				return `
- Frontend: React, Next.js, TypeScript, JavaScript, HTML, CSS, Tailwind
- Backend: Node.js, Express, MongoDB
- Tools: Git, GitHub, VS Code, Docker`
			}
		},
		contact: {
			description: 'Show contact information',
			action: () => {
				return `
Email: amanvarshney.work@gmail.com
GitHub: github.com/AmanVarshney01
LinkedIn: linkedin.com/in/amanvarshney11
X: x.com/amanvarshney01`
			}
		},
		blog: {
			description: 'Show my latest blog posts',
			action: () => {
				return `Visit my blog at /blog to see my latest posts.`
			}
		},
		whoami: {
			description: 'Show current user',
			action: () => {
				return `visitor@amanvarshney.tech`
			}
		},
		date: {
			description: 'Show current date',
			action: () => {
				return new Date().toString()
			}
		},
		time: {
			description: 'Show current time',
			action: () => {
				const now = new Date()
				return now.toLocaleTimeString()
			}
		},
		echo: {
			description: 'Echo back your input',
			action: (args) => {
				return args
			}
		},
		ls: {
			description: 'List sections of this website',
			action: () => {
				return `home/\nprojects/\nblog/\nguestbook/`
			}
		},
		open: {
			description: 'Navigate to a section (open [section])',
			action: (args) => {
				if (!args) return 'Please specify a section to open'

				const sections = {
					home: '/',
					projects: '/projects',
					blog: '/blog',
					guestbook: '/guestbook'
				}

				const section = args.toLowerCase()
				if (sections[section]) {
					window.location.href = sections[section]
					return `Navigating to ${section}...`
				} else {
					return `Section '${args}' not found. Available sections: ${Object.keys(sections).join(', ')}`
				}
			}
		}
	}

	function initCLI() {
		const inputElement = document.getElementById('cli-input')
		const historyElement = document.getElementById('command-history')
		const cliBody = document.getElementById('interactive-cli')

		if (!inputElement || !historyElement || !cliBody) return

		inputElement.focus()

		// Handle clicking anywhere in the terminal
		document.querySelector('.cli-container')?.addEventListener('click', () => {
			inputElement.focus()
		})

		// Process command function
		function processCommand(command) {
			// Add command to history
			if (command.trim()) {
				commandHistory.push(command)
				historyIndex = commandHistory.length
			}

			// Create command line in history
			const commandLine = document.createElement('div')
			commandLine.className = 'history-line'
			commandLine.innerHTML = `<span class="prompt">$</span> <span class="command">${escapeHtml(command)}</span>`
			historyElement.appendChild(commandLine)

			// Process command
			if (command) {
				const [cmd, ...args] = command.split(' ')
				const commandKey = Object.keys(commands).find(
					(key) => key.toLowerCase() === cmd.toLowerCase()
				)

				if (commandKey) {
					const result = commands[commandKey].action(args.join(' '))
					if (result) {
						const outputElement = document.createElement('div')
						outputElement.className = 'output'

						// Convert markdown-style links to HTML links
						const formattedOutput = result.replace(/\[(.+?)\]\((.+?)\)/g, '<a href="$2">$1</a>')
						outputElement.innerHTML = formattedOutput.replace(/\n/g, '<br>')

						historyElement.appendChild(outputElement)
					}
				} else {
					const errorElement = document.createElement('div')
					errorElement.className = 'error'
					errorElement.textContent = `command not found: ${cmd}`
					historyElement.appendChild(errorElement)
				}
			}

			// Clear input and scroll to bottom
			inputElement.value = ''
			cliBody.scrollTop = cliBody.scrollHeight
		}

		inputElement.addEventListener('keydown', (e) => {
			// Handle Enter key
			if (e.key === 'Enter') {
				const command = inputElement.value.trim()
				processCommand(command)
			}

			// Handle Up/Down arrow for history
			else if (e.key === 'ArrowUp') {
				e.preventDefault()
				if (historyIndex === commandHistory.length) {
					tempInputBeforeHistory = inputElement.value
				}

				if (historyIndex > 0) {
					historyIndex--
					inputElement.value = commandHistory[historyIndex]
				}
			} else if (e.key === 'ArrowDown') {
				e.preventDefault()
				if (historyIndex < commandHistory.length - 1) {
					historyIndex++
					inputElement.value = commandHistory[historyIndex]
				} else if (historyIndex === commandHistory.length - 1) {
					historyIndex = commandHistory.length
					inputElement.value = tempInputBeforeHistory
				}
			}

			// Handle tab autocomplete
			else if (e.key === 'Tab') {
				e.preventDefault()
				const input = inputElement.value.trim().toLowerCase()

				if (input) {
					const matches = Object.keys(commands).filter((cmd) =>
						cmd.toLowerCase().startsWith(input.toLowerCase())
					)

					if (matches.length === 1) {
						// Complete the command
						inputElement.value = matches[0]
					} else if (matches.length > 1) {
						// Show available options
						const commandLine = document.createElement('div')
						commandLine.className = 'history-line'
						commandLine.innerHTML = `<span class="prompt">$</span> <span class="command">${escapeHtml(input)}</span>`
						historyElement.appendChild(commandLine)

						const outputElement = document.createElement('div')
						outputElement.className = 'output'
						outputElement.textContent = matches.join('  ')
						historyElement.appendChild(outputElement)

						// Find common prefix if there is one
						if (matches.length > 1) {
							let commonPrefix = matches[0]
							for (let i = 1; i < matches.length; i++) {
								while (!matches[i].startsWith(commonPrefix) && commonPrefix.length > 0) {
									commonPrefix = commonPrefix.substring(0, commonPrefix.length - 1)
								}
								if (commonPrefix.length === 0) break
							}

							if (commonPrefix.length > input.length) {
								inputElement.value = commonPrefix
							}
						}

						// Scroll to bottom
						cliBody.scrollTop = cliBody.scrollHeight
					}
				}
			}

			// Handle Ctrl+L to clear screen (like in bash)
			else if (e.key === 'l' && e.ctrlKey) {
				e.preventDefault()
				commands.clear.action()
			}

			// Handle Ctrl+C to cancel current input
			else if (e.key === 'c' && e.ctrlKey) {
				e.preventDefault()
				const commandLine = document.createElement('div')
				commandLine.className = 'history-line'
				commandLine.innerHTML = `<span class="prompt">$</span> <span class="command">${escapeHtml(inputElement.value)}</span>`
				historyElement.appendChild(commandLine)

				const outputElement = document.createElement('div')
				outputElement.className = 'output'
				outputElement.textContent = '^C'
				historyElement.appendChild(outputElement)

				inputElement.value = ''
				cliBody.scrollTop = cliBody.scrollHeight
			}
		})
	}

	function escapeHtml(unsafe) {
		return unsafe
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#039;')
	}

	// Initialize when the document is loaded
	document.addEventListener('DOMContentLoaded', initCLI)

	// Re-initialize on page transitions
	document.addEventListener('astro:page-load', initCLI)
</script>

<style>
	.cli-container {
		background-color: var(--soft);
		border-radius: 6px;
		overflow: hidden;
		font-family: 'SF Mono', Menlo, Monaco, Consolas, monospace;
		font-size: 0.85rem;
		line-height: 1.5;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
	}

	.cli-header {
		display: flex;
		align-items: center;
		padding: 8px 12px;
		background-color: var(--border);
	}

	.cli-dots {
		display: flex;
		gap: 6px;
		margin-right: 12px;
	}

	.cli-dots span {
		display: block;
		width: 10px;
		height: 10px;
		border-radius: 50%;
		background-color: var(--muted);
	}

	.cli-dots span:first-child {
		background-color: #ff5f57;
	}

	.cli-dots span:nth-child(2) {
		background-color: #ffbd2e;
	}

	.cli-dots span:last-child {
		background-color: #28c840;
	}

	.cli-title {
		font-size: 0.75rem;
		color: var(--muted);
		flex-grow: 1;
		text-align: center;
	}

	.cli-body {
		padding: 12px;
		display: flex;
		flex-direction: column;
		gap: 4px;
		height: 300px;
		overflow-y: auto;
		scrollbar-width: thin;
	}

	.cli-body::-webkit-scrollbar {
		width: 6px;
	}

	.cli-body::-webkit-scrollbar-thumb {
		background-color: var(--border);
		border-radius: 3px;
	}

	.welcome-text {
		color: var(--muted);
		margin-bottom: 12px;
		line-height: 1.4;
	}

	.keyboard-hint {
		font-size: 0.8rem;
		margin-top: 8px;
	}

	.cmd-hint {
		color: var(--accent);
		background-color: var(--border);
		padding: 1px 4px;
		border-radius: 2px;
	}

	.input-line {
		display: flex;
		align-items: center;
		gap: 8px;
	}

	.prompt {
		color: var(--accent);
		user-select: none;
	}

	#cli-input {
		background: transparent;
		border: none;
		color: var(--foreground);
		font-family: inherit;
		font-size: inherit;
		flex: 1;
		padding: 0;
		outline: none;
	}

	.history-line {
		display: flex;
		align-items: baseline;
		gap: 8px;
	}

	.command {
		color: var(--foreground);
		word-break: break-all;
	}

	.output {
		color: var(--muted);
		padding-left: 16px;
		white-space: pre-wrap;
		line-height: 1.4;
		margin-bottom: 8px;
	}

	.output a {
		color: var(--accent);
		text-decoration: none;
	}

	.output a:hover {
		text-decoration: underline;
	}

	.error {
		color: #ff5f57;
		padding-left: 16px;
		margin-bottom: 8px;
	}
</style>
